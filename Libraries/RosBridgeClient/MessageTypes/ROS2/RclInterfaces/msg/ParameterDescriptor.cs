/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

#if ROS2

namespace RosSharp.RosBridgeClient.MessageTypes.RclInterfaces
{
    public class ParameterDescriptor : Message
    {
        public const string RosMessageName = "rcl_interfaces/msg/ParameterDescriptor";

        //  This is the message to communicate a parameter's descriptor.
        //  The name of the parameter.
        public string name { get; set; }
        //  Enum values are defined in the `ParameterType.msg` message.
        public byte type { get; set; }
        //  Description of the parameter, visible from introspection tools.
        public string description { get; set; }
        //  Parameter constraints
        //  Plain English description of additional constraints which cannot be expressed
        //  with the available constraints, e.g. "only prime numbers".
        // 
        //  By convention, this should only be used to clarify constraints which cannot
        //  be completely expressed with the parameter constraints below.
        public string additional_constraints { get; set; }
        //  If 'true' then the value cannot change after it has been initialized.
        public bool read_only { get; set; } = false;

        //  If true, the parameter is allowed to change type.
        public bool dynamic_typing { get; set; } = false;

        //  If any of the following sequences are not empty, then the constraint inside of
        //  them apply to this parameter.
        // 
        //  FloatingPointRange and IntegerRange are mutually exclusive.
        //  FloatingPointRange consists of a from_value, a to_value, and a step.
        public FloatingPointRange[] floating_point_range { get; set; }
        //  IntegerRange consists of a from_value, a to_value, and a step.
        public IntegerRange[] integer_range { get; set; }

        public ParameterDescriptor()
        {
            this.name = "";
            this.type = 0;
            this.description = "";
            this.additional_constraints = "";
            this.floating_point_range = new FloatingPointRange[1];
            this.integer_range = new IntegerRange[1];
        }

        public ParameterDescriptor(string name, byte type, string description, string additional_constraints, FloatingPointRange[] floating_point_range, IntegerRange[] integer_range, bool read_only = false, bool dynamic_typing = false)
        {
            this.name = name;
            this.type = type;
            this.description = description;
            this.additional_constraints = additional_constraints;
            this.read_only = read_only;
            this.dynamic_typing = dynamic_typing;
            this.floating_point_range = floating_point_range;
            this.integer_range = integer_range;
        }
    }
}
#endif
