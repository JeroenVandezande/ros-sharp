/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

#if ROS2

using RosSharp.RosBridgeClient.MessageTypes.BuiltinInterfaces;

namespace RosSharp.RosBridgeClient.MessageTypes.Statistics
{
    public class MetricsMessage : Message
    {
        public const string RosMessageName = "statistics_msgs/msg/MetricsMessage";

        // ############################################
        //  A generic metrics message providing statistics for measurements from different sources. For example,
        //  measure a system's CPU % for a given window yields the following data points over a window of time:
        // 
        //    - average cpu %
        //    - std deviation
        //    - min
        //    - max
        //    - sample count
        // 
        //  These are all represented as different 'StatisticDataPoint's.
        // ############################################
        //  Name metric measurement source, e.g., node, topic, or process name
        public string measurement_source_name { get; set; }
        //  Name of the metric being measured, e.g. cpu_percentage, free_memory_mb, message_age, etc.
        public string metrics_source { get; set; }
        //  Unit of measure of the metric, e.g. percent, mb, seconds, etc.
        public string unit { get; set; }
        //  Measurement window start time
        public Time window_start { get; set; }
        //  Measurement window end time
        public Time window_stop { get; set; }
        //  A list of statistics data point, defined in StatisticDataPoint.msg
        public StatisticDataPoint[] statistics { get; set; }

        public MetricsMessage()
        {
            this.measurement_source_name = "";
            this.metrics_source = "";
            this.unit = "";
            this.window_start = new Time();
            this.window_stop = new Time();
            this.statistics = new StatisticDataPoint[0];
        }

        public MetricsMessage(string measurement_source_name, string metrics_source, string unit, Time window_start, Time window_stop, StatisticDataPoint[] statistics)
        {
            this.measurement_source_name = measurement_source_name;
            this.metrics_source = metrics_source;
            this.unit = unit;
            this.window_start = window_start;
            this.window_stop = window_stop;
            this.statistics = statistics;
        }
    }
}
#endif
