/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

#if ROS2

namespace RosSharp.RosBridgeClient.MessageTypes.Lifecycle
{
    public class Transition : Message
    {
        public const string RosMessageName = "lifecycle_msgs/msg/Transition";

        //  Default values for transitions as described in:
        //  http://design.ros2.org/articles/node_lifecycle.html
        //  Reserved [0-9], publicly available transitions.
        //  When a node is in one of these primary states, these transitions can be
        //  invoked.
        //  This transition will instantiate the node, but will not run any code beyond
        //  the constructor.
        public const byte TRANSITION_CREATE = 0;
        //  The node's onConfigure callback will be called to allow the node to load its
        //  configuration and conduct any required setup.
        public const byte TRANSITION_CONFIGURE = 1;
        //  The node's callback onCleanup will be called in this transition to allow the
        //  node to load its configuration and conduct any required setup.
        public const byte TRANSITION_CLEANUP = 2;
        //  The node's callback onActivate will be executed to do any final preparations
        //  to start executing.
        public const byte TRANSITION_ACTIVATE = 3;
        //  The node's callback onDeactivate will be executed to do any cleanup to start
        //  executing, and reverse the onActivate changes.
        public const byte TRANSITION_DEACTIVATE = 4;
        //  This signals shutdown during an unconfigured state, the node's callback
        //  onShutdown will be executed to do any cleanup necessary before destruction.
        public const byte TRANSITION_UNCONFIGURED_SHUTDOWN = 5;
        //  This signals shutdown during an inactive state, the node's callback onShutdown
        //  will be executed to do any cleanup necessary before destruction.
        public const byte TRANSITION_INACTIVE_SHUTDOWN = 6;
        //  This signals shutdown during an active state, the node's callback onShutdown
        //  will be executed to do any cleanup necessary before destruction.
        public const byte TRANSITION_ACTIVE_SHUTDOWN = 7;
        //  This transition will simply cause the deallocation of the node.
        public const byte TRANSITION_DESTROY = 8;
        //  Reserved [10-69], private transitions
        //  These transitions are not publicly available and cannot be invoked by a user.
        //  The following transitions are implicitly invoked based on the callback
        //  feedback of the intermediate transition states.
        public const byte TRANSITION_ON_CONFIGURE_SUCCESS = 10;
        public const byte TRANSITION_ON_CONFIGURE_FAILURE = 11;
        public const byte TRANSITION_ON_CONFIGURE_ERROR = 12;
        public const byte TRANSITION_ON_CLEANUP_SUCCESS = 20;
        public const byte TRANSITION_ON_CLEANUP_FAILURE = 21;
        public const byte TRANSITION_ON_CLEANUP_ERROR = 22;
        public const byte TRANSITION_ON_ACTIVATE_SUCCESS = 30;
        public const byte TRANSITION_ON_ACTIVATE_FAILURE = 31;
        public const byte TRANSITION_ON_ACTIVATE_ERROR = 32;
        public const byte TRANSITION_ON_DEACTIVATE_SUCCESS = 40;
        public const byte TRANSITION_ON_DEACTIVATE_FAILURE = 41;
        public const byte TRANSITION_ON_DEACTIVATE_ERROR = 42;
        public const byte TRANSITION_ON_SHUTDOWN_SUCCESS = 50;
        public const byte TRANSITION_ON_SHUTDOWN_FAILURE = 51;
        public const byte TRANSITION_ON_SHUTDOWN_ERROR = 52;
        public const byte TRANSITION_ON_ERROR_SUCCESS = 60;
        public const byte TRANSITION_ON_ERROR_FAILURE = 61;
        public const byte TRANSITION_ON_ERROR_ERROR = 62;
        //  Reserved [90-99]. Transition callback success values.
        //  These return values ought to be set as a return value for each callback.
        //  Depending on which return value, the transition will be executed correctly or
        //  fallback/error callbacks will be triggered.
        //  The transition callback successfully performed its required functionality.
        public const byte TRANSITION_CALLBACK_SUCCESS = 97;
        //  The transition callback failed to perform its required functionality.
        public const byte TRANSITION_CALLBACK_FAILURE = 98;
        //  The transition callback encountered an error that requires special cleanup, if
        //  possible.
        public const byte TRANSITION_CALLBACK_ERROR = 99;
        // #
        // # Fields
        // #
        //  The transition id from above definitions.
        public byte id { get; set; }
        //  A text label of the transition.
        public string label { get; set; }

        public Transition()
        {
            this.id = 0;
            this.label = "";
        }

        public Transition(byte id, string label)
        {
            this.id = id;
            this.label = label;
        }
    }
}
#endif
