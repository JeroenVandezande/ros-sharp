/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

#if ROS2

using RosSharp.RosBridgeClient.MessageTypes.Std;
using RosSharp.RosBridgeClient.MessageTypes.Trajectory;

namespace RosSharp.RosBridgeClient.MessageTypes.Control
{
    public class JointTrajectoryControllerState : Message
    {
        public const string RosMessageName = "control_msgs/msg/JointTrajectoryControllerState";

        //  This message presents current controller state of JTC
        //  Header timestamp should be update time of controller state
        public Header header { get; set; }
        public string[] joint_names { get; set; }
        //  The set point, that is, desired state.
        public JointTrajectoryPoint reference { get; set; }
        //  Current value of the process (ie: latest sensor measurement on the controlled value).
        public JointTrajectoryPoint feedback { get; set; }
        //  The error of the controlled value, essentially reference - feedback (for a regular PID implementation).
        public JointTrajectoryPoint error { get; set; }
        //  Current output of the controller.
        public JointTrajectoryPoint output { get; set; }
        public string[] multi_dof_joint_names { get; set; }
        //  The set point, that is, desired state.
        public MultiDOFJointTrajectoryPoint multi_dof_reference { get; set; }
        //  Current value of the process (ie: latest sensor measurement on the controlled value).
        public MultiDOFJointTrajectoryPoint multi_dof_feedback { get; set; }
        //  The error of the controlled value, essentially reference - feedback (for a regular PID implementation).
        public MultiDOFJointTrajectoryPoint multi_dof_error { get; set; }
        //  Current output of the controller.
        public MultiDOFJointTrajectoryPoint multi_dof_output { get; set; }

        public JointTrajectoryControllerState()
        {
            this.header = new Header();
            this.joint_names = new string[0];
            this.reference = new JointTrajectoryPoint();
            this.feedback = new JointTrajectoryPoint();
            this.error = new JointTrajectoryPoint();
            this.output = new JointTrajectoryPoint();
            this.multi_dof_joint_names = new string[0];
            this.multi_dof_reference = new MultiDOFJointTrajectoryPoint();
            this.multi_dof_feedback = new MultiDOFJointTrajectoryPoint();
            this.multi_dof_error = new MultiDOFJointTrajectoryPoint();
            this.multi_dof_output = new MultiDOFJointTrajectoryPoint();
        }

        public JointTrajectoryControllerState(Header header, string[] joint_names, JointTrajectoryPoint reference, JointTrajectoryPoint feedback, JointTrajectoryPoint error, JointTrajectoryPoint output, string[] multi_dof_joint_names, MultiDOFJointTrajectoryPoint multi_dof_reference, MultiDOFJointTrajectoryPoint multi_dof_feedback, MultiDOFJointTrajectoryPoint multi_dof_error, MultiDOFJointTrajectoryPoint multi_dof_output)
        {
            this.header = header;
            this.joint_names = joint_names;
            this.reference = reference;
            this.feedback = feedback;
            this.error = error;
            this.output = output;
            this.multi_dof_joint_names = multi_dof_joint_names;
            this.multi_dof_reference = multi_dof_reference;
            this.multi_dof_feedback = multi_dof_feedback;
            this.multi_dof_error = multi_dof_error;
            this.multi_dof_output = multi_dof_output;
        }
    }
}
#endif
