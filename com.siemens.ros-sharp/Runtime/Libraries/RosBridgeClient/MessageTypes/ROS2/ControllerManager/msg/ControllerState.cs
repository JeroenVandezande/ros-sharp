/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

#if ROS2

namespace RosSharp.RosBridgeClient.MessageTypes.ControllerManager
{
    public class ControllerState : Message
    {
        public const string RosMessageName = "controller_manager_msgs/msg/ControllerState";

        public string name { get; set; }
        //  controller name
        public string state { get; set; }
        //  controller state: unconfigured, inactive, active, or finalized
        public string type { get; set; }
        //  the controller class name, e.g. joint_trajectory_controller/JointTrajectoryController
        public string[] claimed_interfaces { get; set; }
        //  command interfaces currently owned by controller
        public string[] required_command_interfaces { get; set; }
        //  command interfaces required by controller
        public string[] required_state_interfaces { get; set; }
        //  state interfaces required by controller
        public bool is_chainable { get; set; }
        //  specifies whether or not controller can export references for a controller chain
        public bool is_chained { get; set; }
        //  specifies whether or not controller's exported references are claimed by another controller
        public string[] exported_state_interfaces { get; set; }
        //  state interfaces to be exported (only applicable if is_chainable is true)
        public string[] reference_interfaces { get; set; }
        //  references to be exported (only applicable if is_chainable is true)
        public ChainConnection[] chain_connections { get; set; }
        //  specifies list of controllers and their exported references that the controller is chained to

        public ControllerState()
        {
            this.name = "";
            this.state = "";
            this.type = "";
            this.claimed_interfaces = new string[0];
            this.required_command_interfaces = new string[0];
            this.required_state_interfaces = new string[0];
            this.is_chainable = false;
            this.is_chained = false;
            this.exported_state_interfaces = new string[0];
            this.reference_interfaces = new string[0];
            this.chain_connections = new ChainConnection[0];
        }

        public ControllerState(string name, string state, string type, string[] claimed_interfaces, string[] required_command_interfaces, string[] required_state_interfaces, bool is_chainable, bool is_chained, string[] exported_state_interfaces, string[] reference_interfaces, ChainConnection[] chain_connections)
        {
            this.name = name;
            this.state = state;
            this.type = type;
            this.claimed_interfaces = claimed_interfaces;
            this.required_command_interfaces = required_command_interfaces;
            this.required_state_interfaces = required_state_interfaces;
            this.is_chainable = is_chainable;
            this.is_chained = is_chained;
            this.exported_state_interfaces = exported_state_interfaces;
            this.reference_interfaces = reference_interfaces;
            this.chain_connections = chain_connections;
        }
    }
}
#endif
