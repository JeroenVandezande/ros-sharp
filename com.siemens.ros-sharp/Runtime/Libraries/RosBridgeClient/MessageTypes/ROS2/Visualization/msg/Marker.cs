/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

#if ROS2

using RosSharp.RosBridgeClient.MessageTypes.Std;
using RosSharp.RosBridgeClient.MessageTypes.Geometry;
using RosSharp.RosBridgeClient.MessageTypes.BuiltinInterfaces;
using RosSharp.RosBridgeClient.MessageTypes.Sensor;

namespace RosSharp.RosBridgeClient.MessageTypes.Visualization
{
    public class Marker : Message
    {
        public const string RosMessageName = "visualization_msgs/msg/Marker";

        //  See:
        //   - http://www.ros.org/wiki/rviz/DisplayTypes/Marker
        //   - http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes
        // 
        //  for more information on using this message with rviz.
        public const int ARROW = 0;
        public const int CUBE = 1;
        public const int SPHERE = 2;
        public const int CYLINDER = 3;
        public const int LINE_STRIP = 4;
        public const int LINE_LIST = 5;
        public const int CUBE_LIST = 6;
        public const int SPHERE_LIST = 7;
        public const int POINTS = 8;
        public const int TEXT_VIEW_FACING = 9;
        public const int MESH_RESOURCE = 10;
        public const int TRIANGLE_LIST = 11;
        public const int ARROW_STRIP = 12;
        public const int ADD = 0;
        public const int MODIFY = 0;
        public const int DELETE = 2;
        public const int DELETEALL = 3;
        //  Header for timestamp and frame id.
        public Header header { get; set; }
        //  Namespace in which to place the object.
        //  Used in conjunction with id to create a unique name for the object.
        public string ns { get; set; }
        //  Object ID used in conjunction with the namespace for manipulating and deleting the object later.
        public int id { get; set; }
        //  Type of object.
        public int type { get; set; }
        //  Action to take; one of:
        //   - 0 add/modify an object
        //   - 1 (deprecated)
        //   - 2 deletes an object (with the given ns and id)
        //   - 3 deletes all objects (or those with the given ns if any)
        public int action { get; set; }
        //  Pose of the object with respect the frame_id specified in the header.
        public Pose pose { get; set; }
        //  Scale of the object; 1,1,1 means default (usually 1 meter square).
        public Vector3 scale { get; set; }
        //  Color of the object; in the range: [0.0-1.0]
        public ColorRGBA color { get; set; }
        //  How long the object should last before being automatically deleted.
        //  0 indicates forever.
        public Duration lifetime { get; set; }
        //  If this marker should be frame-locked, i.e. retransformed into its frame every timestep.
        public bool frame_locked { get; set; }
        //  Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ARROW_STRIP, etc.)
        public Point[] points { get; set; }
        //  Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)
        //  The number of colors provided must either be 0 or equal to the number of points provided.
        //  NOTE: alpha is not yet used
        public ColorRGBA[] colors { get; set; }
        //  Texture resource is a special URI that can either reference a texture file in
        //  a format acceptable to (resource retriever)[https://docs.ros.org/en/rolling/p/resource_retriever/]
        //  or an embedded texture via a string matching the format:
        //    "embedded://texture_name"
        public string texture_resource { get; set; }
        //  An image to be loaded into the rendering engine as the texture for this marker.
        //  This will be used iff texture_resource is set to embedded.
        public CompressedImage texture { get; set; }
        //  Location of each vertex within the texture; in the range: [0.0-1.0]
        public UVCoordinate[] uv_coordinates { get; set; }
        //  Only used for text markers
        public string text { get; set; }
        //  Only used for MESH_RESOURCE markers.
        //  Similar to texture_resource, mesh_resource uses resource retriever to load a mesh.
        //  Optionally, a mesh file can be sent in-message via the mesh_file field. If doing so,
        //  use the following format for mesh_resource:
        //    "embedded://mesh_name"
        public string mesh_resource { get; set; }
        public MeshFile mesh_file { get; set; }
        public bool mesh_use_embedded_materials { get; set; }

        public Marker()
        {
            this.header = new Header();
            this.ns = "";
            this.id = 0;
            this.type = 0;
            this.action = 0;
            this.pose = new Pose();
            this.scale = new Vector3();
            this.color = new ColorRGBA();
            this.lifetime = new Duration();
            this.frame_locked = false;
            this.points = new Point[0];
            this.colors = new ColorRGBA[0];
            this.texture_resource = "";
            this.texture = new CompressedImage();
            this.uv_coordinates = new UVCoordinate[0];
            this.text = "";
            this.mesh_resource = "";
            this.mesh_file = new MeshFile();
            this.mesh_use_embedded_materials = false;
        }

        public Marker(Header header, string ns, int id, int type, int action, Pose pose, Vector3 scale, ColorRGBA color, Duration lifetime, bool frame_locked, Point[] points, ColorRGBA[] colors, string texture_resource, CompressedImage texture, UVCoordinate[] uv_coordinates, string text, string mesh_resource, MeshFile mesh_file, bool mesh_use_embedded_materials)
        {
            this.header = header;
            this.ns = ns;
            this.id = id;
            this.type = type;
            this.action = action;
            this.pose = pose;
            this.scale = scale;
            this.color = color;
            this.lifetime = lifetime;
            this.frame_locked = frame_locked;
            this.points = points;
            this.colors = colors;
            this.texture_resource = texture_resource;
            this.texture = texture;
            this.uv_coordinates = uv_coordinates;
            this.text = text;
            this.mesh_resource = mesh_resource;
            this.mesh_file = mesh_file;
            this.mesh_use_embedded_materials = mesh_use_embedded_materials;
        }
    }
}
#endif
